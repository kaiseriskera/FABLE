configfile: "config/config.yaml"

OPT = config["rule_opt"]
raw_fastq = config["fastq_data"]
ref_genome = config["reference"]

rule all:
    input:
        "report/PCNF_A_fastqc.html",
        "report/PCNF_A_NanoPlot-report.html",
        "report/aligned_A_NanoPlot-report.html"

rule prep_data:
    input: 
        raw_fastq
    output: 
        "data/{sample}.fastq.gz"
    shell: 
        "ln -sf {input} {output}"

rule porechop:
    input: 
        "data/{sample}.fastq.gz"
    output: 
        "data/pc_{sample}.fastq.gz"
    benchmark:
        "benchmarks/PoreChop/{sample}.txt"
    shell: 
        "porechop -i {input} -o {output}"
        
rule nanofilt:
    input: 
        "data/pc_{sample}.fastq.gz"
    output:
        "data/PCNF_{sample}.fastq.gz"
    params:
        quality="10",
        headcrop="10"
    benchmark:
        "benchmarks/NanoFilt/{sample}.txt"
    shell:
        "gunzip -c {input} | NanoFilt -q {params.quality} --headcrop {params.headcrop} | gzip > {output}"

rule fastqc:
    input:
        "data/PCNF_{sample}.fastq.gz"
    output:
        "report/PCNF_{sample}_fastqc.html",
        "report/PCNF_{sample}_fastqc.zip"
    threads: 5
    benchmark:
        "benchmarks/fastqc/{sample}.txt"
    shell:
        "fastqc --threads {threads} --outdir report {input}"
    
rule pre_aln_NanoPlot:
    input:
        "data/PCNF_{sample}.fastq.gz"
    output:
        "report/PCNF_{sample}_NanoPlot-report.html",
        "report/PCNF_{sample}_NanoStats.txt"
    params:
        prefix="PCNF_{sample}_",
        outdir="report"
    threads: 8 
    benchmark:
        "benchmarks/Pre-alignment_NanoPlot/{sample}.txt"
    shell:
        "NanoPlot -t {threads} --fastq {input} --outdir {params.outdir} -p {params.prefix}"

if OPT == 'vulcan':
    rule vulcan:
        input:
            ref = ref_genome,
            fastq="data/PCNF_{sample}.fastq.gz"
        output:
            "data/vulcan_PCNF_{sample}_90.bam"
        params:
            prefix="data/vulcan_PCNF_{sample}"
        threads: 10
        benchmark:
            "benchmarks/Vulcan/{sample}.txt"
        shell:
            "vulcan -ont -t {threads} -r {input.ref} -i {input.fastq} -o {params.prefix}"
    
    rule vulcan_bam_index:
        input:
            "data/vulcan_PCNF_{sample}_90.bam",
        output:
            "data/vulcan_PCNF_{sample}_90.bam.bai",
        benchmark:
            "benchmarks/vulcan_bam_index/{sample}.txt"
        shell:
            "samtools index {input}"

    rule vulcan_NanoPlot:
        input:
            "data/vulcan_PCNF_{sample}_90.bam",
        output:
            "report/vulcan_PCNF_{sample}_NanoPlot-report.html",
            "report/vulcan_PCNF_{sample}_NanoStats.txt"
        params:
            prefix="vulcan_PCNF_{sample}_",
            outdir="report"
        threads: 8
        benchmark:
            "benchmarks/Post-alignment_vulcan_NanoPlot/{sample}.txt"
        shell:
            "NanoPlot -t {threads} --bam {input} -p {params.prefix} -o {params.outdir}"

    #To dos: workaround
    rule vulcan_final_report:
        input:
            "report/vulcan_PCNF_{sample}_NanoPlot-report.html"
        output:
            "report/aligned_{sample}_NanoPlot-report.html"
        shell:
            "cp {input} {output}"
        
else:
    rule minimap2:
        input:
            ref = ref_genome,
            fastq="data/PCNF_{sample}.fastq.gz"
        output:
            "data/mm2_PCNF_{sample}.sam"
        benchmark:
            "benchmarks/Minimap2/{sample}.txt"
        shell:
            "minimap2 -ax map-ont {input.ref} {input.fastq} > {output}"

    rule sam_to_bam:
        input:
            "data/mm2_PCNF_{sample}.sam"
        output:
            "data/mm2_PCNF_{sample}.bam"
        benchmark:
            "benchmarks/mm2_sam_to_bam/{sample}.txt"
        shell:
            "samtools sort {input} -o {output}"
            
    rule mm2_bam_index:
        input:
            "data/mm2_PCNF_{sample}.bam"
        output:
            "data/mm2_PCNF_{sample}.bam.bai"
        benchmark:
            "benchmarks/mm2_bam_index/{sample}.txt"
        shell:
            "samtools index {input}"

    rule mm2_NanoPlot:
        input:
            "data/mm2_PCNF_{sample}.bam"
        output:
            "report/mm2_PCNF_{sample}_NanoPlot-report.html",
            "report/mm2_PCNF_{sample}_NanoStats.txt"
        params:
            prefix="mm2_PCNF_{sample}_",
            outdir="report"
        threads: 8
        benchmark:
            "benchmarks/Post-alignment_mm2_NanoPlot/{sample}.txt"
        shell:
            "NanoPlot -t {threads} --bam {input} -p {params.prefix} -o {params.outdir}"

    #To dos: workaround to simplify the command line input to snakemake
    rule mm2_final_report:
        input:
            "report/mm2_PCNF_{sample}_NanoPlot-report.html"
        output:
            "report/aligned_{sample}_NanoPlot-report.html"
        shell:
            "cp {input} {output}"
    
